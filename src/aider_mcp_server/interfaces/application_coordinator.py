"""
Defines the protocol for the ApplicationCoordinator.
"""

from typing import Any, Dict, Optional, Protocol, Type

from typing_extensions import runtime_checkable

from aider_mcp_server.atoms.event_types import EventTypes
from aider_mcp_server.atoms.internal_types import (
    InternalRequest,
    InternalResponse,
)
from aider_mcp_server.interfaces.transport_adapter import ITransportAdapter


@runtime_checkable
class IApplicationCoordinator(Protocol):
    """
    Protocol for the central application coordinator.
    Manages transport adapters, request processing, and event broadcasting.
    """

    async def startup(self) -> None:
        """Initializes and starts the coordinator and its components."""
        ...

    async def shutdown(self) -> None:
        """Shuts down the coordinator and releases resources."""
        ...

    async def register_transport(self, transport_id: str, transport_class: Type[ITransportAdapter]) -> None:
        """
        Registers a transport adapter class with the coordinator.

        Args:
            transport_id: A unique identifier for the transport.
            transport_class: The class of the transport adapter to register.
        """
        ...

    async def unregister_transport(self, transport_id: str) -> None:
        """
        Unregisters a transport adapter from the coordinator.

        Args:
            transport_id: The ID of the transport adapter to unregister.
        """
        ...

    async def get_transport(self, transport_id: str) -> Optional[Type[ITransportAdapter]]:
        """
        Retrieves a registered transport adapter class.

        Args:
            transport_id: The ID of the transport adapter.

        Returns:
            The transport adapter class if found, otherwise None.
        """
        ...

    async def broadcast_event(
        self,
        event_type: EventTypes,
        data: Dict[str, Any],
        exclude_transport_id: Optional[str] = None,
    ) -> None:
        """
        Broadcasts an event to relevant transports.

        Args:
            event_type: The type of event to broadcast.
            data: The event data.
            exclude_transport_id: Optionally, a transport ID to exclude from broadcasting.
        """
        ...

    async def process_request(self, request: InternalRequest) -> InternalResponse:
        """
        Processes an internal request.

        Args:
            request: The internal request to process.

        Returns:
            The internal response generated by handling the request.
        """
        ...
